#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
//#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"

#ifndef KEYMAP_DRAWER
#include "keys_sv.h"
#endif

/*
#define HOST_OS 2  // set to 2 for macOS/Windows-Alt-Codes, default is 0 (Windows)
#include "./siguro_se.dtsi"
*/

#define COLEMAK 0
#define SYMNUM 1
#define NAV 2
#define FN 3

#define PREV LG(LS(LBKT))
#define NEXT LG(LS(RBKT))

#define M_FIND LG(F)
#define M_UNDO LG(Z)
#define M_COPY LG(C)
#define M_CUT LG(X)
#define M_PASTE LG(V)
#define M_ALL LG(A)
#define M_SAVE LG(S)
#define M_NEW LG(N)

#define ZOOM_IN  LG(PLUS)
#define ZOOM_OUT LG(MINUS)
#define ZOOM_RES LG(N0)

#define BRI_UP LC(C_BRI_UP)
#define BRI_DN LC(C_BRI_DN)

#define MEH LCTRL(LALT(LSHFT))

/* Combos */
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

// make homerow combos tap-only (so HRMs can be chorded instantaneously)
//#define HRC_TAB    &hml         LA(LCTRL) TAB
//#define HRC_REPEAT &hml_repeat  LS(LCTRL) 0

/*                                      38 KEY MATRIX / LAYOUT MAPPING
    ╭────────────────────┬────────────────────╮        ╭──────────────────────┬─────────────────────╮
    │  0   1   2   3   4 │  5   6   7   8   9 │        │  LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
 ╭──╯ 10  11  12  13  14 │ 15  16  17  18  19 ╰───╮ ╭──╯  LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 ╰───╮
 │ 20 21  22  23  24  25 │ 26  27  28  29  30  31 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰──────────╮ 32  33  34 │ 35  36  37 ╭───────────╯ ╰──────────╮  LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
            ╰────────────┴────────────╯                        ╰──────────────┴─────────────╯
*/

ZMK_COMBO(combo_FSLH,    &kp SV_FSLH,     LT4 LM4, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // /
ZMK_COMBO(combo_SV_LT,   &kp SV_LT,       LT3 LM3, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // <
ZMK_COMBO(combo_SV_LBKT, &kp SV_LBKT,     LT2 LM2, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // [
ZMK_COMBO(combo_SV_LPAR, &kp SV_LPAR,     LT1 LM1, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // (
ZMK_COMBO(combo_SV_LBRC, &kp SV_LBRC,     LT0 LM0, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // {

ZMK_COMBO(combo_SV_RBRC, &kp SV_RBRC,     RT0 RM0, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // }
ZMK_COMBO(combo_SV_RPAR, &kp SV_RPAR,     RT1 RM1, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // )
ZMK_COMBO(combo_SV_RBKT, &kp SV_RBKT,     RT2 RM2, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // ]
ZMK_COMBO(combo_SV_GT,   &kp SV_GT,       RT3 RM3, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // >
ZMK_COMBO(combo_BSLH,    &kp SV_BSLH,     RT4 RM4, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // \

ZMK_COMBO(combo_pipe,    &kp SV_PIPE,     LM4 LB4, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // |
ZMK_COMBO(combo_EXCL,    &kp SV_EXCL,     LM3 LB3, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // !
ZMK_COMBO(combo_QMARK,   &kp SV_QMARK,    LM2 LB2, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // ?
ZMK_COMBO(combo_EQUAL,   &kp SV_EQUAL,    LM1 LB1, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // =
ZMK_COMBO(combo_PLUS,    &kp SV_PLUS,     LM0 LB0, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // +

//ZMK_COMBO(combo_TILDE,   &macro_tilde,    RM0 RB0, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // Ö
ZMK_COMBO(combo_oe,      &kp SV_O_UMLAUT, RM1 RB1, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // Ö
ZMK_COMBO(combo_ao,      &kp SV_A_RING,   RM2 RB2, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // Å
ZMK_COMBO(combo_ae,      &kp SV_A_UMLAUT, RM3 RB3, COLEMAK, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)  // Ä

ZMK_COMBO(combo_BT_CLR,  &bt BT_CLR,      LT2 LT1, FN, COMBO_TERM_FAST, COMBO_IDLE_FAST)

/* Global settings */
#define QUICK_TAP_MS 175

&sk {  // sticky-key config
  release-after-ms = <900>;  // release after 0.6s
  quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
  ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
  flavor = "balanced";
  tapping-term-ms = <280>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Custom behaviors */

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// Tap: ' Shift + tap: "
SIMPLE_MORPH(sqt_quot, SFT, &kp SV_SQT, &kp SV_DQT)

// Tap: ! Shift + tap: ?
SIMPLE_MORPH(excl_qmark, SFT, &kp SV_EXCL, &kp SV_QMARK)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

ZMK_MACRO(macro_tilde,
    wait-ms = <30>;
    tap-ms = <40>;
    bindings = <&kp SV_TILDE &kp SPACE>;
)

ZMK_MACRO(macro_grave,
    wait-ms = <30>;
    tap-ms = <40>;
    bindings = <&kp SV_GRAVE &kp SPACE>;
)

ZMK_MACRO(macro_caret,
    wait-ms = <30>;
    tap-ms = <40>;
    bindings = <&kp SV_CARET &kp SPACE>;
)

ZMK_MACRO(macro_dir_up,
    wait-ms = <30>;
    tap-ms = <40>;
    bindings = <&kp SV_DOT &kp SV_DOT &kp SV_FSLH>;
)

ZMK_MACRO(macro_dir_home,
    wait-ms = <30>;
    tap-ms = <40>;
    bindings = <&kp SV_TILDE &kp SV_FSLH>;
)

/* Unicode */
ZMK_UNICODE_SINGLE(currsign, N0, N0, A, N4)

ZMK_CONDITIONAL_LAYER(fn_layer, SYMNUM NAV, FN)
/* Keymap */
/*                                      38 KEY MATRIX / LAYOUT MAPPING
    ╭────────────────────┬────────────────────╮        ╭──────────────────────┬─────────────────────╮
    │  0   1   2   3   4 │  5   6   7   8   9 │        │  LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
 ╭──╯ 10  11  12  13  14 │ 15  16  17  18  19 ╰───╮ ╭──╯  LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 ╰───╮
 │ 20 21  22  23  24  25 │ 26  27  28  29  30  31 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰──────────╮ 32  33  34 │ 35  36  37 ╭───────────╯ ╰──────────╮  LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
            ╰────────────┴────────────╯                        ╰──────────────┴─────────────╯
*/

ZMK_LAYER(colemak,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                    &kp Q         &kp W         &kp F         &kp P          &kp B             &kp J        &kp L         &kp U         &kp Y        &sqt_quot
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
                  &hml LSHFT A  &hml LCTRL R  &hml LALT S   &hml LGUI T      &kp G             &kp M      &hmr RGUI N    &hmr RALT E  &hmr RCTRL I  &hmr RSHFT O
//╭─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮ 
      &kp ESC       &kp Z         &kp X         &kp C         &kp D          &kp V             &kp K         &kp H     &kp SV_COMMA    &kp SV_DOT   &kp SV_MINUS    &kp RET
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                               &sl SYMNUM     &sl NAV     &smart_shft        &kp SPACE     NAV_BSPC       &kp TAB
//                                          ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯  
)

ZMK_LAYER(sym,
//                   ╭──────────────────┬────────────────────┬─────────────────┬────────────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                        &macro_caret         &macro_grave        &kp SV_AMPS        &kp SV_PRCNT     &macro_dir_up        &none         &kp N7        &kp N8        &kp N9        &none
//                   ├──────────────────┼────────────────────┼─────────────────┼────────────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
                       &hml LSHFT SV_AT  &hml LCTRL SV_STAR   &hml LALT SV_DLLR  &hml LGUI SV_HASH  &macro_dir_home       &none      &hmr RGUI N4  &hmr RALT N5  &hmr RCTRL N6    &kp N0
//╭──────────────────┴──────────────────┼────────────────────┼─────────────────┼────────────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮ 
       &kp ESC             &none               &none               &none           &macro_tilde          &none            &none         &kp N1        &kp N2        &kp N3        &none         &kp RET
//╰──────────────────┴──────────────────┴────────────────────┴─────────────────┼────────────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                                                   &none             &mo NAV             &none            &kp SPACE     NAV_BSPC      &kp TAB
//                                                           ╰─────────────────┴────────────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯  
)

ZMK_LAYER(nav,
//              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &none         &none       &kp M_FIND     &kp M_NEW      &none             &none       &kp HOME       NAV_UP       &kp END       &kp PG_UP
//              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
                &hml LSHFT M_ALL &kp LCTRL  &hml LALT M_SAVE  &kp LGUI       &none             &none       NAV_LEFT      NAV_DOWN      NAV_RIGHT     &kp PG_DN
//╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮ 
      &kp ESC      &kp M_UNDO    &kp M_CUT    &kp M_COPY       &none      &kp M_PASTE          &none         &none         &none         &none         &none        &kp RET
//╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &mo SYMNUM      &none         &none           &kp SPACE      NAV_BSPC      &kp TAB 
//                                          ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯  
)

ZMK_LAYER(fn,
//                     ╭────────────────────┬──────────────────┬───────────────────┬─────────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬──────────────┬───────────────╮
                           &bt BT_SEL 0         &bt BT_SEL 1       &bt BT_SEL 2        &bt BT_SEL 3    &out OUT_TOG         &none        &kp F7        &kp F8        &kp F9         &kp F10
//                     ├────────────────────┼──────────────────┼───────────────────┼─────────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼──────────────┼───────────────┤ 
                          &hml LSHFT C_MUTE  &hml LCTRL C_VOL_DN &hml LALT C_VOL_UP   &hml LGUI C_PP      &none             &none        &kp F4        &kp F5        &kp F6         &kp F11
//╭────────────────────┼────────────────────┼──────────────────┼───────────────────┼─────────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼──────────────┼───────────────┼───────────────╮ 
           &kp ESC            &kp BRI_DN         &kp BRI_UP         &kp C_PREV          &kp C_NEXT        &none             &none        &kp F1        &kp F2        &kp F3         &kp F12          &kp RET
//╰────────────────────┴────────────────────┴──────────────────┴───────────────────┼─────────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼──────────────┴───────────────┴───────────────╯
                                                                      &none               &none           &none           &kp SPACE      NAV_BSPC      &kp TAB
//                                                             ╰───────────────────┴─────────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯  
)
